name: Pre-commit Hooks Check

on:
  workflow_call:
    inputs:
      # Define the input parameters for the workflow
      encoded_modified_files:
        required: true
        type: string
        description: "The base64 encoded list of modified files to check"
    outputs:
      # Define the output parameters for the workflow
      main_outcome:
        description: "The status of the Pre-commit job"
        value: ${{ jobs.pre-commit-check.outputs.main_outcome }}

jobs:
  pre-commit-check:
    name: main
    runs-on: ubuntu-latest

    steps:
      # Step to check out the code
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          # Install necessary dependencies
          sudo apt-get update
          sudo apt-get install -y unzip direnv

      # Step to set up Python
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Install Pre-commit
        run: |
          # Install Pre-commit and other dependencies
          python -m pip install --upgrade pip
          pip install pre-commit shellcheck-py

      - name: Setup Repository
        run: |
          # Setup the repository
          ./bootstrap.sh # this script should be present in the caller repository and should run pre-commit install

          # Extract the updated PATH and write it to GITHUB_ENV
          NEW_PATH=$(direnv exec . bash -c 'echo $PATH')
          echo "PATH=$NEW_PATH" >> $GITHUB_ENV

      # Step to cache pre-commit environments
      - name: Cache pre-commit envs
        uses: actions/cache@v4
        with:
          path: ~/.cache/pre-commit
          key: pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}
          restore-keys: |
            pre-commit-

      # Step to run Pre-commit Hooks only to files which have changed
      - name: Run Pre-commit
        id: main
        env:
          ENCODED_MODIFIED_FILES: ${{ inputs.encoded_modified_files }}
        run: |
          # Run pre-commit only on modified files
          echo "$ENCODED_MODIFIED_FILES" | base64 -d | xargs pre-commit run --files

    outputs:
      main_outcome: ${{ steps.main.outcome }}
