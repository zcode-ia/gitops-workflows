name: Terragrunt plan

on:
  workflow_call:
    inputs:
      # Define the input parameters for the workflow
      encoded_working_dirs:
        description: "Base64 encoded working directories"
        required: true
        type: string
      github_repository:
        description: "The GitHub repository in the format 'owner/repo'"
        required: true
        type: string
      github_run_id:
        description: "GitHub run ID"
        required: true
        type: string
      github_event_pull_request_number:
        description: "GitHub event pull request number"
        required: true
        type: number
      owner:
        required: true
        description: "Owner of the repository"
        type: string
      repositories:
        required: true
        description: "Comma-separated list of repositories to generate tokens for"
        type: string
    secrets:
      github_app_id:
        required: true
        description: "GitHub App ID for token generation"
      github_app_private_key:
        required: true
        description: "Private key for the GitHub App to generate a token"
      github_secret_token:
        required: true
        description: "The GitHub token to call modules from other repositories"
      # Define the secrets required for the workflow
      infracost_api_key:
        description: "Infracost API key"
        required: true
    outputs:
      # Define the output parameters for the workflow
      encoded_comment_title:
        description: "The base64 encoded comment title"
        value: ${{ jobs.terragrunt_plan.outputs.encoded_comment_title }}
      encoded_comment_outputs:
        description: "The base64 encoded comment outputs"
        value: ${{ jobs.terragrunt_plan.outputs.encoded_comment_outputs }}
      comment_status:
        description: "The status of the comment"
        value: ${{ jobs.terragrunt_plan.outputs.comment_status }}
      artifact_id:
        description: "The ID of the uploaded artifact"
        value: ${{ jobs.terragrunt_plan.outputs.artifact_id }}
      artifact_url:
        description: "The URL of the uploaded artifact"
        value: ${{ jobs.terragrunt_plan.outputs.artifact_url }}
      main_outcome:
        description: "The status of the Terragrunt plan job"
        value: ${{ jobs.terragrunt_plan.outputs.main_outcome }}

jobs:
  terragrunt_plan:
    name: main
    runs-on: ubuntu-latest
    services:
      localstack:
        image: localstack/localstack:latest
        ports:
          - 4566:4566

    steps:
      # Step to generate GitHub App token
      - name: Generate GitHub App Token
        uses: actions/create-github-app-token@df432ceedc7162793a195dd1713ff69aefc7379e # v2.0.6
        id: app-token
        with:
          app-id: ${{ secrets.github_app_id }}
          private-key: ${{ secrets.github_app_private_key }}
          owner: ${{ inputs.owner }}
          repositories: ${{ inputs.repositories }}

      # Step to checkout the code
      - name: Checkout Code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.4.2
        with:
          submodules: recursive
          persist-credentials: false
          token: ${{ steps.app-token.outputs.token }}

      # Caching Terraform and Terragrunt dependencies
      - name: Cache Terragrunt
        uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
        with:
          path: ~/.cache/terragrunt/providers
          key: provider-cache-${{ runner.os }}-${{ hashFiles('**/aws.hcl') }}

      - name: Install Dependencies
        run: |
          # Install necessary dependencies

          sudo apt-get update -y && \
          sudo apt-get install -y unzip direnv

      - name: Setup Repository
        run: |
          # Set up the repository

          SKIP=enable_pre_commit,init_git_submodule ./bootstrap.sh # this script should be present in the caller repository

          # Extract the updated PATH and write it to GITHUB_ENV
          NEW_PATH=$(direnv exec . bash -c 'echo $PATH')
          echo "PATH=$NEW_PATH" >> $GITHUB_ENV

      - name: Terragrunt Plan
        id: main
        env:
          ENCODED_WORKING_DIRS: ${{ inputs.encoded_working_dirs }}
          INPUT_GITHUB_REPOSITORY: ${{ inputs.github_repository }}
          INPUT_GITHUB_RUN_ID: ${{ inputs.github_run_id }}
          INPUT_GITHUB_EVENT_PULL_REQUEST_NUMBER: ${{ inputs.github_event_pull_request_number }}
          INPUT_GITHUB_TOKEN: ${{ secrets.github_secret_token }}
          INFRACOST_API_KEY: ${{ secrets.infracost_api_key }}
        run: |
          # Generate a Terragrunt plan

          # Ensure that the GITHUB_TOKEN is set for git operations
          AUTH_URL="https://x-access-token:${INPUT_GITHUB_TOKEN}@github.com/"
          git config --global url."${AUTH_URL}".insteadOf https://github.com/

          # URL for the GitHub run ID
          RUN_ID_URL="https://github.com/${INPUT_GITHUB_REPOSITORY}/actions/runs/${INPUT_GITHUB_RUN_ID}"

          # File to store the output
          TERRAGRUNT_RUNALL_OUTPUT_FILENAME=terragrunt_runall_output.txt
          ARTIFACT_PATH_FILENAME="${GITHUB_WORKSPACE}/${INPUT_GITHUB_EVENT_PULL_REQUEST_NUMBER}-${INPUT_GITHUB_RUN_ID}-output.txt"

          # Initialize variables to store title and all plan outputs
          COMMENT_TITLE="## Plan result\n\n"
          COMMENT_OUTPUTS="Show plan for the following directories:\n\n"
          COMMENT_OUTPUTS_MAX_LENGTH=65000

          # Decode the base64 encoded working directories
          for WORKING_DIR in $(echo "${ENCODED_WORKING_DIRS}" | base64 -d); do
            # Check if the working directory exists
            if [ -d "${WORKING_DIR}" ]; then
              # Adding the directory name to the output
              COMMENT_OUTPUTS="${COMMENT_OUTPUTS}<details><summary>${WORKING_DIR}</summary>\n"

              echo "Planning ${WORKING_DIR}..." >> "${ARTIFACT_PATH_FILENAME}"

              # Run Terragrunt init in the directory
              terragrunt run-all init --non-interactive --no-color --working-dir "${WORKING_DIR}" --provider-cache

              # Run Terragrunt plan in the directory
              terragrunt run-all plan --out=plan.tfplan --non-interactive --no-color --working-dir "${WORKING_DIR}" --provider-cache 2>&1 | tee "${TERRAGRUNT_RUNALL_OUTPUT_FILENAME}"

              # Extract the plan header from the output
              PLAN_HEADER=$(awk '/The stack at/ {flag=1; print substr($0, index($0, "The stack at")); next} /Terraform used the selected providers to generate/ {flag=0} flag' "${TERRAGRUNT_RUNALL_OUTPUT_FILENAME}")

              COMMENT_OUTPUTS="${COMMENT_OUTPUTS}\n\n<pre>${PLAN_HEADER}</pre>\n"
              echo >> "${ARTIFACT_PATH_FILENAME}"
              echo -e "${PLAN_HEADER}\n\n" >> "${ARTIFACT_PATH_FILENAME}"

              # List all plan files, ordering by creation time
              for PLAN_DIR in $(find ${WORKING_DIR} -name plan.tfplan -printf '%T@ %h\n' | sort -n | cut -d' ' -f2-); do
                RESOURCE_DIR=$(echo "${PLAN_DIR}" | sed -E "s|^${WORKING_DIR}/||; s|/\.terragrunt-cache.*||")

                echo "Saving ${RESOURCE_DIR} plan content..."

                # Capture the Terraform plan output
                PLAN_OUTPUT=$(terraform -chdir=${PLAN_DIR} show -no-color plan.tfplan)

                echo "Saving ${RESOURCE_DIR} infracost content..."
                # Capture the Infracost breakdown output
                INFRACOST_OUTPUT=$(infracost breakdown --path ${PLAN_DIR})

                # Append the output to the aggregated variable
                COMMENT_OUTPUTS="${COMMENT_OUTPUTS}\n\n#### Plan for ${RESOURCE_DIR}\n\n<pre>${PLAN_OUTPUT}<br><br>${INFRACOST_OUTPUT}</pre>\n"
                echo -e "\nPlan for ${RESOURCE_DIR}\n${PLAN_OUTPUT}\n\n" >> "${ARTIFACT_PATH_FILENAME}"
                echo -e "${INFRACOST_OUTPUT}\n\n" >> "${ARTIFACT_PATH_FILENAME}"
              done
              COMMENT_OUTPUTS="${COMMENT_OUTPUTS}</details>"
              echo
            else
              echo "Directory ${WORKING_DIR} does not exist."
            fi
          done

          if [ ! -f ${TERRAGRUNT_RUNALL_OUTPUT_FILENAME} ]; then
            # Set variables to warning no plan was generated
            COMMENT_TITLE="## Plan result\n\n"
            COMMENT_OUTPUTS="No plan was generated. Check pipeline logs for more details. [${INPUT_GITHUB_RUN_ID}](${RUN_ID_URL})\n\n"
            echo "comment_status=pass" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Convert to base64 to avoid issues with special characters and newlines
          ENCODED_COMMENT_TITLE=$(echo -e "$COMMENT_TITLE" | jq -Rsa . | base64 -w 0)
          echo "encoded_comment_title=${ENCODED_COMMENT_TITLE}" >> $GITHUB_OUTPUT

          if [[ ${#COMMENT_OUTPUTS} -gt ${COMMENT_OUTPUTS_MAX_LENGTH} ]]; then
            echo "Comment output exceeds ${COMMENT_OUTPUTS_MAX_LENGTH} characters, uploading artifact..."
            echo "artifact_path_filename=${ARTIFACT_PATH_FILENAME}" >> $GITHUB_OUTPUT
            COMMENT_OUTPUTS="Content too long for github comments."
            ENCODED_COMMENT_OUTPUTS=$(echo -e "$COMMENT_OUTPUTS" | jq -Rsa . | base64 -w 0)
            echo "encoded_comment_outputs=${ENCODED_COMMENT_OUTPUTS}" >> $GITHUB_OUTPUT
            echo "comment_status=fallback" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Escape the content of COMMENT_OUTPUTS for JSON and convert to base64 to avoid issues with special characters and newlines
          ENCODED_COMMENT_OUTPUTS=$(echo -e "$COMMENT_OUTPUTS" | jq -Rsa . | base64 -w 0)
          echo "encoded_comment_outputs=${ENCODED_COMMENT_OUTPUTS}" >> $GITHUB_OUTPUT

          echo "comment_status=pass" >> $GITHUB_OUTPUT

          # Search for Error message in the output file
          if grep -q "STDERR" "${TERRAGRUNT_RUNALL_OUTPUT_FILENAME}"; then
            COMMENT_OUTPUTS="The pipeline has failed! Check the logs for more details. [${INPUT_GITHUB_RUN_ID}](${RUN_ID_URL})\n\n"
            ENCODED_COMMENT_OUTPUTS=$(echo -e "$COMMENT_OUTPUTS" | jq -Rsa . | base64 -w 0)
            echo "encoded_comment_outputs=${ENCODED_COMMENT_OUTPUTS}" >> $GITHUB_OUTPUT
            echo "comment_status=fallback" >> $GITHUB_OUTPUT
            echo "Error found in the output, failing the job..."
            exit 1
          fi
        # to ensure comment postage even if this step fails
        continue-on-error: true

      - name: Upload Comment Contents
        id: upload_comment
        if: steps.main.outcome == 'success' && steps.main.outputs.comment_status == 'fallback'
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          path: ${{ steps.main.outputs.artifact_path_filename }}
          retention-days: 5
          overwrite: true

    outputs:
      encoded_comment_title: ${{ steps.main.outputs.encoded_comment_title }}
      encoded_comment_outputs: ${{ steps.main.outputs.encoded_comment_outputs }}
      comment_status: ${{ steps.main.outputs.comment_status }}
      artifact_id: ${{ steps.upload_comment.outputs.artifact-id }}
      artifact_url: ${{ steps.upload_comment.outputs.artifact-url }}
      main_outcome: ${{ steps.main.outcome }}
